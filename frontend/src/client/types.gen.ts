// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginForAccessTokenTokenPost = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Recording = {
    name: string;
    file_url: string;
    id?: number | null;
    user_id: number;
    analysis?: string | null;
};

export type RecordingBase = {
    name: string;
    file_url: string;
};

export type RecordingUpdate = {
    name?: string | null;
    file_url?: string | null;
    analysis?: string | null;
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type User = {
    username: string;
    email: string;
    id?: number | null;
    hashed_password: string;
};

export type UserCreate = {
    username: string;
    email: string;
    password: string;
};

export type UserPublic = {
    username: string;
    email: string;
    id: number;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type CreateUserUsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type CreateUserUsersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserUsersPostError = CreateUserUsersPostErrors[keyof CreateUserUsersPostErrors];

export type CreateUserUsersPostResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type CreateUserUsersPostResponse = CreateUserUsersPostResponses[keyof CreateUserUsersPostResponses];

export type ReadUsersMeUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/';
};

export type ReadUsersMeUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type ReadUsersMeUsersMeGetResponse = ReadUsersMeUsersMeGetResponses[keyof ReadUsersMeUsersMeGetResponses];

export type ReadOwnItemsUsersMeItemsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/items/';
};

export type ReadOwnItemsUsersMeItemsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginForAccessTokenTokenPostData = {
    body: BodyLoginForAccessTokenTokenPost;
    path?: never;
    query?: never;
    url: '/token/';
};

export type LoginForAccessTokenTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginForAccessTokenTokenPostError = LoginForAccessTokenTokenPostErrors[keyof LoginForAccessTokenTokenPostErrors];

export type LoginForAccessTokenTokenPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginForAccessTokenTokenPostResponse = LoginForAccessTokenTokenPostResponses[keyof LoginForAccessTokenTokenPostResponses];

export type GetRecordingsRecordingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/recordings/';
};

export type GetRecordingsRecordingsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Recording>;
};

export type GetRecordingsRecordingsGetResponse = GetRecordingsRecordingsGetResponses[keyof GetRecordingsRecordingsGetResponses];

export type CreateRecordingRecordingsPostData = {
    body: RecordingBase;
    path?: never;
    query?: never;
    url: '/recordings/';
};

export type CreateRecordingRecordingsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRecordingRecordingsPostError = CreateRecordingRecordingsPostErrors[keyof CreateRecordingRecordingsPostErrors];

export type CreateRecordingRecordingsPostResponses = {
    /**
     * Successful Response
     */
    200: Recording;
};

export type CreateRecordingRecordingsPostResponse = CreateRecordingRecordingsPostResponses[keyof CreateRecordingRecordingsPostResponses];

export type UpdateUserRecordingRecordingsIdPatchData = {
    body: RecordingUpdate;
    path: {
        id: number;
    };
    query?: never;
    url: '/recordings/{id}';
};

export type UpdateUserRecordingRecordingsIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserRecordingRecordingsIdPatchError = UpdateUserRecordingRecordingsIdPatchErrors[keyof UpdateUserRecordingRecordingsIdPatchErrors];

export type UpdateUserRecordingRecordingsIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Recording;
};

export type UpdateUserRecordingRecordingsIdPatchResponse = UpdateUserRecordingRecordingsIdPatchResponses[keyof UpdateUserRecordingRecordingsIdPatchResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};