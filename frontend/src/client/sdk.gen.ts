// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { CreateUserUsersPostData, CreateUserUsersPostResponse, CreateUserUsersPostError, ReadUsersMeUsersMeGetData, ReadUsersMeUsersMeGetResponse, ReadOwnItemsUsersMeItemsGetData, LoginForAccessTokenTokenPostData, LoginForAccessTokenTokenPostResponse, LoginForAccessTokenTokenPostError, GetRecordingsRecordingsGetData, GetRecordingsRecordingsGetResponse, CreateRecordingRecordingsPostData, CreateRecordingRecordingsPostResponse, CreateRecordingRecordingsPostError, UpdateUserRecordingRecordingsIdPatchData, UpdateUserRecordingRecordingsIdPatchResponse, UpdateUserRecordingRecordingsIdPatchError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create User
 */
export const createUserUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserUsersPostResponse, CreateUserUsersPostError, ThrowOnError>({
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Users Me
 */
export const readUsersMeUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUsersMeUsersMeGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/',
        ...options
    });
};

/**
 * Read Own Items
 */
export const readOwnItemsUsersMeItemsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadOwnItemsUsersMeItemsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/items/',
        ...options
    });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginForAccessTokenTokenPostResponse, LoginForAccessTokenTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/token/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get Recordings
 */
export const getRecordingsRecordingsGet = <ThrowOnError extends boolean = false>(options?: Options<GetRecordingsRecordingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecordingsRecordingsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recordings/',
        ...options
    });
};

/**
 * Create Recording
 */
export const createRecordingRecordingsPost = <ThrowOnError extends boolean = false>(options: Options<CreateRecordingRecordingsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRecordingRecordingsPostResponse, CreateRecordingRecordingsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recordings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update User Recording
 */
export const updateUserRecordingRecordingsIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserRecordingRecordingsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserRecordingRecordingsIdPatchResponse, UpdateUserRecordingRecordingsIdPatchError, ThrowOnError>({
        url: '/recordings/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};